@using BlazorAppClientServer.Shared.Models;
@using BlazorAppClientServer.Client.Services;
@using System.Net;
@inject HttpClient Http

@page "/ordrepage"

<h3>OdrePage</h3>

@if (OrdreList.Count == 0)
{
	<p><em>Loading...</em></p> // Viser en loading skærm indtil dataen er blevet hentet
}
else 
{
	<table class="table">
		<thead>
			<tr>
				<th>Id </th>
				<th>Date </th>
				<th>Status </th>
				<th>Mekaniker </th>
				<th>Kunde </th>
				<th></th>
			</tr>
		</thead>
		<tbody>
			@foreach (var ordre in OrdreList)
			{

				<tr>
					<td>@ordre.OrdreId </td>
					<td>@ordre.OrdreDate </td>
					<td>@ordre.Status </td>
					<td>@if (@ordre.MekanikerId != null) //Viser kun mekanikernavn hvis der er en mekaniker tilknyttet 
						{
							@MekanikerListe.Single(x => x.MekanikerId == ordre.MekanikerId).Navn;
						}
					</td>				
					<td>@ordre.KundeId </td>
					<td>
						<td> <button class="btn btn-primary" @onclick="() => ShowPopup(ydelse, true)">Edit</button> </td></td>
				</tr>
				
			}

		</tbody>
	</table>
}

@if (isPopupVisible)
{
	<div>
		<InputSelect @bind-Value="tempOrdre.MekanikerId">
			@foreach (var mekaniker in MekanikerListe)
			{
				<option value="@mekaniker.MekanikerId"> @mekaniker.Navn </option>
			}
		</InputSelect>
		<button @onclick="()=> UpdateMekanikerHandler(ordre)"> Skift Mekaniker</button>
	</div>

}


@code {
	private List<Ordre> OrdreList = new List<Ordre>();
	private List<Mekaniker> MekanikerListe = new List<Mekaniker>();

	private Ordre tempOrdre = new Ordre();

	[Inject]
	private IOrdreService OrdreService { get; set; }

	[Inject]
	private IMekanikerService MekanikerService { get; set; }

	private int ErrorCode { get; set; } = 0;

	protected override async Task OnInitializedAsync()
	{
		List<Ordre> templist = (await OrdreService.GetAllOrdre()).ToList(); // Henter alle odrer fra databasen
		OrdreList = templist.Where(x => x.Status == false).ToList(); // Sørger for at der kun viser ordre der ikke er fuldført
		MekanikerListe = (await MekanikerService.GetAllMekaniker()).ToList();
	}

	private async Task UpdateMekanikerHandler(Ordre ordre)
	{
			ordre.MekanikerId = tempOrdre.MekanikerId;
			ErrorCode = await OrdreService.UpdateOrdre(ordre);
			Console.WriteLine($"Odre updated: {ordre.OrdreId}, return code" + ErrorCode);
			if (ErrorCode == (int)HttpStatusCode.OK)
			{
				List<Ordre> templist = (await OrdreService.GetAllOrdre()).ToList();
				OrdreList = templist.Where(x => x.Status == false).ToList();
			}
	}

	private async Task DeleteItemHandler(Ordre ordre)
	{
		ErrorCode = await OrdreService.DeleteOrdre(ordre.OrdreId);
		Console.WriteLine($"Shopping item deleted: {ordre.OrdreId}, return code" + ErrorCode);
		if (ErrorCode == (int)HttpStatusCode.OK)
		{
			List<Ordre> templist = (await OrdreService.GetAllOrdre()).ToList();
			OrdreList = templist.Where(x => x.Status == false).ToList();
		}
	}

	private bool isPopupVisible = false;
	private string modalTitle = "Opret ny Ydelse";
	private string modalButtonText = "Save";

	// <td> <button class="btn btn-primary" @onclick="() => ShowPopup(ydelse, true)">Edit</button> </td></td>
}
