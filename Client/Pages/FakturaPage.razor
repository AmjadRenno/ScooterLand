@page "/fakturapage"
@using BlazorAppClientServer.Client.Services
@using BlazorAppClientServer.Shared.Models
@inject IFakturaService FakturaService

<Header />

<h2>Fakturaer</h2>

@if (!string.IsNullOrEmpty(Message))
{
    <div class="alert alert-info">@Message</div>
}

<div class="row">
    <div class="col-md-6">
        <h4>Opret Ny Faktura</h4>
        <EditForm Model="@NewFaktura" OnValidSubmit="AddFaktura">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div>
                <label>Ordre ID:</label>
                <InputNumber @bind-Value="NewFaktura.OrdreId" class="form-control" />
                <ValidationMessage For="@(() => NewFaktura.OrdreId)" />
            </div>
            <button type="submit" class="btn btn-primary mt-2">Opret Faktura</button>
        </EditForm>
    </div>

    <div class="col-md-6">
        <h4>S√∏g Faktura</h4>
        <div class="form-group">
            <label for="searchId">S√∏g nummer:</label>
            <input type="number" class="form-control" id="searchId" @bind="SearchId" />
        </div>
        <div class="form-check mt-2">
            <input type="checkbox" class="form-check-input" id="isOrdreId" @bind="IsOrdreId" />
            <label class="form-check-label" for="isOrdreId">S√∏g p√• ordrenummer</label>
        </div>
        <button class="btn btn-primary mt-2" @onclick="SearchFaktura">S√∏g</button>
    </div>
</div>

<br />

@if (IsLoading)
{
    <p><em>üîÑ Loading...</em></p>
}
else if (FakturaList != null && FakturaList.Any())
{
    <ul>
        @foreach (var faktura in FakturaList)
        {
            <li>
                Faktura #: @faktura.FakturaId - Ordre: @(faktura.Ordre?.OrdreId.ToString() ?? "Ingen ordre")
                <button class="btn btn-info mx-2 mb-2" @onclick="() => ShowFakturaDetails(faktura)">Vis Detaljer</button>
                <button class="btn btn-warning mx-2 mb-2" @onclick="() => DeleteFakturaWithSql(faktura.FakturaId)">
                    Slet
                </button>
                @if (faktura.Ordre != null && !faktura.Ordre.Status)
                {
                    <button class="btn btn-success mx-2 mb-2" @onclick="() => MarkOrderAsCompleted(faktura.FakturaId)">Mark√©r som Fuldf√∏rt</button>
                }
            </li>
        }
    </ul>
}
else
{
    <p>Ingen fakturaer fundet.</p>
}

@if (SelectedFaktura != null)
{
    <div class="card mt-4">
        <div class="card-header bg-primary text-white text-center">
            <h4>Faktura #: @SelectedFaktura.FakturaId</h4>
        </div>
        <div class="card-body">
            <table class="table table-bordered">
                <thead class="thead-light">
                    <tr>
                        <th colspan="2" class="text-center">Faktura Detaljer</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td><strong>Faktura ID:</strong></td>
                        <td>@SelectedFaktura.FakturaId</td>
                    </tr>
                    <tr>
                        <td><strong>Ordre ID:</strong></td>
                        <td>@(SelectedFaktura.Ordre?.OrdreId.ToString() ?? "Ingen ordre")</td>
                    </tr>
                    <tr>
                        <td><strong>Kunde Navn:</strong></td>
                        <td>@(SelectedFaktura.Ordre?.Kunde?.Navn ?? "Ukendt")</td>
                    </tr>
                    <tr>
                        <td><strong>Mekaniker:</strong></td>
                        <td>@(SelectedFaktura.Ordre?.Mekaniker?.Navn ?? "Ukendt")</td>
                    </tr>
                    <tr>
                        <td><strong>Dato:</strong></td>
                        <td>@SelectedFaktura.Ordre?.OrdreDate.ToShortDateString()</td>
                    </tr>
                    <tr>
                        <td><strong>Status:</strong></td>
                        <td style="color: @(SelectedFaktura.Ordre?.Status == true ? "green" : "red")">
                            @(SelectedFaktura.Ordre?.Status == true ? "Fuldf√∏rt" : "Ikke fuldf√∏rt")
                        </td>
                    </tr>
                </tbody>
            </table>

            <h5 class="mt-4">Ydelser i Ordren</h5>
            @if (SelectedFaktura.Ordre?.YdelseTilOrdre != null && SelectedFaktura.Ordre.YdelseTilOrdre.Any())
            {
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Navn</th>
                            <th>Pris (dkk)</th>
                            <th>M√¶ngde</th>
                            <th>Total Pris (dkk)</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var ydelseTilOrdre in SelectedFaktura.Ordre.YdelseTilOrdre)
                        {
                            <tr>
                                <td>@ydelseTilOrdre.Ydelse?.Navn</td>
                                <td>@ydelseTilOrdre.AktuelPris</td>
                                <td>@ydelseTilOrdre.M√¶ngde</td>
                                <td>@ydelseTilOrdre.TotalPris</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <p class="text-muted">Ingen ydelser tilf√∏jet.</p>
            }
        </div>
        <div class="card-footer text-center">
            <button class="btn btn-secondary" @onclick="ClearDetails">Luk Detaljer</button>
        </div>
    </div>
}

@code {
    private List<Faktura> FakturaList = new();
    private Faktura? SelectedFaktura;
    private Faktura NewFaktura = new();
    private string Message = string.Empty;
    private bool IsLoading = true;
    private bool IsOrdreId { get; set; }
    private int SearchId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadFakturaer();
    }

    private async Task LoadFakturaer()
    {
        IsLoading = true;
        try
        {
            FakturaList = (await FakturaService.GetAllFakturaer()).ToList();
        }
        catch (Exception ex)
        {
            Message = $"Kunne ikke hente fakturaer: {ex.Message}";
        }
        finally
        {
            IsLoading = false;
        }
    }

    private void ShowFakturaDetails(Faktura faktura) => SelectedFaktura = faktura;

    private void ClearDetails() => SelectedFaktura = null;

    private async Task AddFaktura()
    {
        try
        {
            var status = await FakturaService.AddFaktura(NewFaktura);

            if (status >= 200 && status < 300)
            {
                Message = "Faktura tilf√∏jet succesfuldt!";
                NewFaktura = new Faktura();
                await LoadFakturaer();
            }
            else if (status == 400)
            {
                Message = "Kunne ikke tilf√∏je faktura. Kontroll√©r oplysningerne og pr√∏v igen.";
            }
            else
            {
                Message = "Kunne ikke tilf√∏je faktura.";
            }
        }
        catch (Exception ex)
        {
            Message = $"Fejl under tilf√∏jelse: {ex.Message}";
        }
    }

    

    private async Task DeleteFakturaWithSql(int fakturaId)
    {
        try
        {
            var status = await FakturaService.DeleteFakturaWithSql(fakturaId);

            if (status == 204)
            {
                Message = "Faktura slettet succesfuldt med SQL!";
                await LoadFakturaer();
            }
            else
            {
                Message = "Kunne ikke slette faktura med SQL.";
            }
        }
        catch (Exception ex)
        {
            Message = $"Fejl under sletning med SQL: {ex.Message}";
        }
    }


    private async Task MarkOrderAsCompleted(int fakturaId)
    {
        try
        {
            var status = await FakturaService.MarkOrderAsCompleted(fakturaId);

            if (status == 204)
            {
                Message = "Ordre markeret som fuldf√∏rt!";
                await LoadFakturaer();
            }
            else
            {
                Message = "Kunne ikke markere ordre som fuldf√∏rt.";
            }
        }
        catch (Exception ex)
        {
            Message = $"Fejl under opdatering: {ex.Message}";
        }
    }

    private async Task SearchFaktura()
    {
        try
        {
            var result = await FakturaService.SearchFakturaByID(SearchId, IsOrdreId);
            if (result != null)
            {
                FakturaList = new List<Faktura> { result };
                Message = "Faktura fundet";
            }
           
        }
        catch (Exception ex)
        {
            Message = $"Der er ingen Order med dette ID. Pr√∏v igen";
        }
    }
}


