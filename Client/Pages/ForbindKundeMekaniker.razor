@page "/forbind-kunde-mekaniker"

@using BlazorAppClientServer.Client.Services
@using BlazorAppClientServer.Shared.Models
@using Radzen  <!-- Importer Radzen -->
@using Radzen.Blazor
@using BlazorAppClientServer.Client.Shared

@inject IKundeService KundeService
@inject IMekanikerService MekanikerService
@inject HttpClient Http

<h3>Forbind Kunde til Mekaniker</h3>

<div>
    <label for="kunde">Vælg Kunde:</label>
    <select id="kunde" @bind="selectedKundeId">
        <option value="">-- Vælg --</option>
        @foreach (var kunde in kunder)
        {
            <option value="@kunde.KundeId">@kunde.Navn</option>
        }
    </select>
</div>

<div>
    <label for="mekaniker">Vælg Mekaniker:</label>
    <select id="mekaniker" @bind="selectedMekanikerId">
        <option value="">-- Vælg --</option>
        @foreach (var mekaniker in mekanikere)
        {
            <option value="@mekaniker.MekanikerId">@mekaniker.Navn</option>
        }
    </select>
</div>

<button @onclick="ForbindKundeTilMekaniker">Forbind</button>

@if (errorMessage != null)
{
    <p style="color: red;">@errorMessage</p>
}

@if (successMessage != null)
{
    <p style="color: green;">@successMessage</p>
}

@code {
    private List<Kunde> kunder = new();
    private List<Mekaniker> mekanikere = new();

    private int? selectedKundeId;
    private int? selectedMekanikerId;

    private string? errorMessage;
    private string? successMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var fetchedKunder = (await KundeService.GetAllKunder()).ToList();
            kunder = fetchedKunder ?? new List<Kunde>();

            var fetchedMekanikere = (await MekanikerService.GetAllMekaniker()).ToList();
            mekanikere = fetchedMekanikere ?? new List<Mekaniker>();
        }
        catch (Exception ex)
        {
            errorMessage = "Fejl ved indlæsning af data: " + ex.Message;
            kunder = new List<Kunde>();
            mekanikere = new List<Mekaniker>();
        }
    }


    private async Task ForbindKundeTilMekaniker()
    {
        if (selectedKundeId == null || selectedMekanikerId == null)
        {
            errorMessage = "Vælg både en kunde og en mekaniker.";
            return;
        }

        var kunde = kunder.FirstOrDefault(k => k.KundeId == selectedKundeId);
        if (kunde != null)
        {
            kunde.MekanikerId = selectedMekanikerId;
            var success = await KundeService.UpdateKunde(kunde);

            if (success)
            {
                successMessage = "Kunde forbundet til mekaniker.";
                errorMessage = null;
            }
            else
            {
                errorMessage = "Der opstod en fejl.";
                successMessage = null;
            }
        }
    }
}