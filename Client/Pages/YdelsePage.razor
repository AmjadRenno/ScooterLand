@page "/ydelsepage"
@using Radzen  <!-- Importer Radzen -->
@using Radzen.Blazor
@using BlazorAppClientServer.Client.Services
@using BlazorAppClientServer.Shared.Models
@using System.Net;

<h3>Book Ydelse</h3>

<EditForm Model="ordre" OnValidSubmit="@HandleFormSubmit">

    <DataAnnotationsValidator />
    <ValidationSummary />

    <RadzenCard>
                <RadzenFieldset>
    <legend>Booking Information</legend>

    <div class="form-group">
        <label for="navn">Navn:</label>
        <InputText id="navn" @bind-Value="ydelse.Navn" class="form-control" placeholder="Indtast navn på kunden" required />
    </div>

    <div class="form-group">
                        <RadzenDropDown @bind-Value="selectedYdelse"
                        Data="@YdelseList"
                        ValueProperty="YdelseId"
                        Multiple="true"
                        Placeholder="Vælg en eller flere ydelser"
                        Style="width: 100%; max-width: 400px;"
                        Name="YdelseDropDown" />
    </div>
    <div class="form-group">
        <button class="btn btn-secondary" @onclick="AddSelectedYdelse">Tilføj valgte ydelser</button>
    </div>

     <li class="list-group-item d-flex flex-column">
                                @ydelse.Navn - @ydelse.Pris.ToString("C2")
                                <RadzenDropDown @bind-Value="ordre.MekanikerId"
                                Data="@MekanikerList"
                                ValueProperty="MekanikerId"
                                Placeholder="Vælg mekaniker"
                                Style="width: 100%; max-width: 300px;" />
                                <button class="btn btn-sm btn-danger mt-2" @onclick="() => RemoveYdelse(ydelse)">Fjern</button>
                            </li>

    <div class="form-group">
                        <label for="pris">Pris:</label>
                        <RadzenNumeric id="pris"
                        Value="ydelse.Pris"
                        Disabled="true"
                        Style="width: 100%;"
                        FormatString="C2" /> <!-- Format the price with 2 decimal places -->
                        <span class="ml-2">DKK</span> <!-- Add DKK after the price -->
                    </div>

    <div class="form-group">
                        <label for="date">Dato:</label>
                        <InputDate id="date" @bind-Value="ordre.OrdreDate" class="form-control" min="@DateTime.Today.ToString("yyyy-MM-dd")" required />
                    </div>
        </RadzenFieldset>
    <div class="form-group">
        <button type="submit" class="btn btn-primary btn-block">Bekræft Booking</button>
    </div>

    </RadzenCard>
</EditForm>

<!-- Prisliste til højre -->
<RadzenColumn Width="4">
    <RadzenCard>
        <RadzenFieldset>
            <legend>Vores Ydelser</legend>
            <ul class="list-group">
                @foreach (var ydelse in AddedYdelser)
                {
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        @ydelse.Navn
                        <span class="badge badge-primary">@ydelse.Pris.ToString("C")</span>
                    </li>
                }
            </ul>
        </RadzenFieldset>
    </RadzenCard>
</RadzenColumn>

@code {
    private Ydelse ydelse = new();
    private bool _isBooked = false;
    private List<Ydelse> AddedYdelser = new();
    private Ordre ordre = new();

    private List<Ydelse> YdelseList = new();
    private List<Mekaniker> MekanikerList = new();
    private int selectedYdelse = new();

    [Inject]
    private IYdelseService YdelseService { get; set; }

    [Inject]
    private IMekanikerService MekanikerService { get; set; }

    [Inject]
    private IOrdreService OrdrerService { get; set;  }

    int ErrorCode { get; set; } = 0;

    protected override async Task OnInitializedAsync()
    {
        YdelseList = (await YdelseService.GetAllYdelser()).ToList();
    }

    private void AddSelectedYdelse()
    {
        AddedYdelser.Add(YdelseList.Single(x => x.YdelseId == selectedYdelse));
    }


    private void RemoveYdelse(Ydelse ydelse)
    {
        AddedYdelser.Remove(ydelse);
    }

    private async void HandleFormSubmit()
    {
        _isBooked = true;
        ErrorCode = await OrdrerService.AddOrdre(ordre);
        if (ErrorCode == (int)HttpStatusCode.OK)
        {
            AddedYdelser.Clear();
        }
    }
}