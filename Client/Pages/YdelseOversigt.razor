@using BlazorAppClientServer.Shared.Models;
@using BlazorAppClientServer.Client.Services;
@using System.Net;
@using BlazorAppClientServer.Client.Shared
@inject HttpClient Http

@page "/ydelseoversigt"

<Header />

<p>
    <button class="btn btn-primary" @onclick="CreateNew">Tilføj en Ydelse</button>
</p>

<h3>VærkførerYdelser</h3>

@if (ydelseList.Count == 0)
{
    <p><em>🔄 Loading...</em></p>
    // Viser en loading skærm indtil dataen er blevet hentet
}
else
{
    <table class="table table-striped text-center">

        <thead>
            <tr>
                <th>Navn </th>
                <th>Pris </th>
                <th>Art </th>
                <th>Timer </th>
                <th width="75"></th>
                <th width="75"></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var ydelse in ydelseList)
            {
                <tr>
                    <td>@ydelse.Navn </td>
                    <td>@ydelse.Pris </td>
                    <td>@ydelse.Art </td>
                    <td>@ydelse.Timer </td>
                    <td> <button class="btn btn-primary" @onclick="() => ShowPopup(ydelse, true)">Rediger</button> </td>
                    <td>
                        <button @onclick="() => ShowDeletePopup(ydelse)"
                        class="btn btn-primary text-decoration-underline text-warning">
                            Slet
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (isPopupVisible)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@modalTitle</h5>
                    <button type="button" class="btn-close" @onclick="ClosePopup"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="selectedYdelse" OnValidSubmit="HandleFormSubmit"
                    class="needs-validation" novalidate>
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="mb-3">
                            <label for="navn" class="form-label">Navn</label>
                            <InputText @bind-Value="selectedYdelse.Navn"
                            class="form-control" id="navn" />
                        </div>
                        <div class="mb-3">
                            <label for="pris" class="form-label">Pris</label>
                            <InputNumber @bind-Value="selectedYdelse.Pris"
                            class="form-control" id="pris" />
                        </div>
                        <div class="mb-3">
                            <label for="art" class="form-label">Art</label>
                            <InputText @bind-Value="selectedYdelse.Art"
                            class="form-control" id="art" />
                        </div>
                        <div class="mb-3">
                            <label for="timer" class="form-label">Timer</label>
                            <InputNumber @bind-Value="selectedYdelse.Timer"
                            class="form-control" id="timer" />
                        </div>

                        <button type="submit" class="btn btn-primary">@modalButtonText</button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@if (isDeletePopupVisible)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Slet Ydelse</h5>
                    <button type="button" class="btn-close"
                    @onclick="CloseDeletePopup"></button>
                </div>
                <div class="modal-body">
                    <p>Er du sikker på at du vil slette denne ydelse?</p>
                    <button class="btn btn-danger"
                    @onclick="HandleDelete">
                        Delete
                    </button>
                    <button class="btn btn-secondary"
                    @onclick="CloseDeletePopup">
                        Cancel
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private List<Ydelse> ydelseList = new List<Ydelse>();
    private Ydelse selectedYdelse = new Ydelse();

    private int ErrorCode { get; set; } = 0;

    [Inject]
    private IYdelseService Service { get; set; }

    protected override async Task OnInitializedAsync()
    {
        ydelseList = (await Service.GetAllYdelser()).ToList();
    }

    private bool isPopupVisible, isDeletePopupVisible = false;
    private string modalTitle = "Opret ny Ydelse";
    private string modalButtonText = "Save";
    private bool isEditMode = false;

    private void CreateNew()
    {
        selectedYdelse = new Ydelse();
        ShowPopup(selectedYdelse, isEdit: false);
    }

    private void ShowPopup(Ydelse ydelse, bool isEdit)
    {
        selectedYdelse = ydelse;
        isEditMode = isEdit;
        modalTitle = isEdit ? "Redigere Ydelse" : "Tilføj Ydelse";
        modalButtonText = isEdit ? "Gem Ændringer" : "Gem";
        isPopupVisible = true;
    }

    private void ClosePopup()
    {
        isPopupVisible = false;
    }

    private async Task HandleFormSubmit()
    {
        if (isEditMode)
        {
            // Update ydelsen hvis isEditMode er true
            ErrorCode = await Service.UpdateYdelse(selectedYdelse);
            if (ErrorCode == (int)HttpStatusCode.OK)
            {
                ydelseList = (await Service.GetAllYdelser()).ToList();
            }
        }
        else
        {
            // Create ydelsen hvis isEditMode er falsk
            ErrorCode = await Service.AddYdelse(selectedYdelse);
            if (ErrorCode == (int)HttpStatusCode.OK)
            {
                ydelseList = (await Service.GetAllYdelser()).ToList();
            }
        }
        ClosePopup();
    }

    private void ShowDeletePopup(Ydelse ydelse)
    {
        // Sætter den valgte ydelse
        selectedYdelse = ydelse;
        // Viser delete popups
        isDeletePopupVisible = true;
    }
    private void CloseDeletePopup()
    {
        // Lukker popup
        isDeletePopupVisible = false;
    }
    private async Task HandleDelete()
    {
        // Sletter ydelsen
        ErrorCode = await Service.DeleteYdelse(selectedYdelse.YdelseId);
        if (ErrorCode == (int)HttpStatusCode.OK)
            {
            ydelseList = (await Service.GetAllYdelser()).ToList();
            }
        // Lukker popup efter ydelsen er slettet
        CloseDeletePopup();
    }
}
