@using Radzen  <!-- Importer Radzen -->
@using Radzen.Blazor
@using BlazorAppClientServer.Client.Services
@using BlazorAppClientServer.Shared.Models
@using System.Net;
@inject HttpClient HttpClient

@page "/opretordre"

<h3>Create a New Order</h3>

@if (ydelseList.Count == 0)
{
    <p><em>Loading...</em></p>
    // Viser en loading skærm indtil dataen er blevet hentet
}
else 
{
    <div class="form-group">
        <div class="list-group-item d-flex flex-column">
            <label class="form-label">Kunde Navn:</label>
            <input type="text" class="form-control" @bind="selectedKunde" placeholder="Indtast navn på kunden" required />
        </div>

        <div class="list-group-item d-flex flex-column">
            <label class="form-label">Mekaniker:</label>
            <select class="form-control" @bind="selectedMekaniker">
                @foreach (var mekaniker in mekanikerList)
                {
                    <option value="@mekaniker.MekanikerId"> @mekaniker.Navn </option>
                }
            </select>
        </div>

        <div class="list-group-item d-flex flex-column">
            <label class="form-label">Vælg en Ydelse:</label>
            <select class="form-control" name="ydelse" id="ydelse" @bind-value="selectedYdelseId" @bind-value:event="onchange" @bind-value:after=" () => ShowPopup(false)" placeholder="Vælg en Ydelse" required>
                @foreach (var ydelse in ydelseList)
                {
                    <option value="@ydelse.YdelseId">
                        @ydelse.Navn (
                        @if (aktuelPris == 0)
                        {
                            @ydelse.Pris
                        }
                        else
                        {
                            @aktuelPris
                        } dkk)
                    </option>
                }
            </select>
            <div>
                <button class="btn btn-primary btn-sm" @onclick="() => ShowPopup(true)"> Ændre pris</button>
                <button class="btn btn-primary btn-sm" @onclick="resetAktuelPris"> Nulstil pris</button>
            </div>
            <div class="align-content-lg-end">
                <label class="form-label">Mængde:</label>
                <input type="number" class="form-control" @bind="selectedMængde" min="1" />
            </div>
        </div>
        <button class="btn btn-primary" @onclick="AddYdelse">Add to List</button>
    </div>

    <h4>Ydelse i Ordrer:</h4>
    @if (ordrerYdelser.Any()) // Viser ydelserne i ordreren hvis der er nogen
    {
        <ul class="list-group">
            @foreach (var ydelse in ordrerYdelser)
            {
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    @ydelse.YdelseNavn - Quantity: @ydelse.YdelseMængde - Pris: @ydelse.YdelsePris
                    <button class="btn btn-sm btn-danger mt-2" @onclick="() => RemoveYdelse(ydelse)">Fjern</button>
                </li>
            }
        </ul>
        <h4>
            Pris i alt = @totalPrice dkk.
        </h4>
    }
    else
    {
        <p>Ingen ydelser tilføljet endnu.</p>
    }

    <button class="btn btn-primary" @onclick="SubmitOrder">Opret Ordre</button>

    @if (!string.IsNullOrEmpty(successMessage))
    {
        <p style="color: green;">@successMessage</p>
    }

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <p style="color: red;">@errorMessage</p>
    }
}



@if (isPopupVisible) // Viser hvis man har valgt Udlejning af scooter
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@modalTitle</h5>
                    <button type="button" class="btn-close" @onclick="()=> ClosePopup(false)"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="lejetScooter" OnValidSubmit="AddLejetScooter"
                    class="needs-validation" novalidate>
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="mb-3">
                            <label for="lejepris" class="form-label">LejePris</label>
                            <InputNumber @bind-Value="lejetScooter.LejePris"
                            class="form-control" id="lejepris" />
                        </div>
                        <div class="mb-3">
                            <label for="dagelejet" class="form-label">Dage Lejet</label>
                            <InputNumber @bind-Value="lejetScooter.DageLejet"
                            class="form-control" id="dagelejet" />
                        </div>
                        <div class="mb-3">
                            <label for="forsikring" class="form-label">Forskikring</label>
                            <InputNumber @bind-Value="lejetScooter.Forskikring"
                            class="form-control" id="forsikring" />
                        </div>
                        <div class="mb-3">
                            <label for="kørtkilometer" class="form-label">Kørt Kilometer</label>
                            <InputNumber @bind-Value="lejetScooter.KørtKilometer"
                            class="form-control" id="kørtkilometer" />
                        </div>

                        <div class="mb-3">
                            <label for="skadet" class="form-label">Skadet?</label>
                            <InputCheckbox @bind-Value="lejetScooter.Skadet"
                            class="" id="skadet" />
                        </div>

                        <button type="submit" class="btn btn-primary">@modalButtonText</button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@if (isChangePopupVisible) // Viser hvis man har valgt at ændre prisen
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@modalTitle</h5>
                    <button type="button" class="btn-close" @onclick="()=> ClosePopup(true)"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="aktuelpris" class="form-label">Ny Pris:</label>
                        <InputNumber @bind-Value="aktuelPris"
                        class="form-control" id="aktuelpris" />
                    </div>
                    <button type="submit" class="btn btn-primary" @onclick="()=> ClosePopup(false)">@modalButtonText</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    [Inject]
    private IOrdreService OrdreService { get; set; }
    [Inject]
    private IYdelseService YdelseService { get; set; }
    [Inject]
    private IKundeService KundeService { get; set; }
    [Inject]
    private IMekanikerService MekanikerService { get; set; }

    private string selectedKunde = "";
    private int selectedYdelseId = 1;
    private int selectedMængde = 1;
    private int selectedMekaniker = 1;

    private List<Ydelse> ydelseList = new();
    private List<Kunde> kundeList = new();
    private List<Mekaniker> mekanikerList = new();
    private List<OrdrerYdelse> ordrerYdelser = new();

    private string successMessage;
    private string errorMessage;

    private bool isPopupVisible, isChangePopupVisible = false;
    private bool isChange = false;
    private LejetScooter lejetScooter = new LejetScooter();
    private string modalTitle;
    private string modalButtonText = "Opret Ydelse";

    private double aktuelPris = 0;
    private double totalPrice = 0;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            ydelseList = (await YdelseService.GetAllYdelser()).ToList();
            kundeList = (await KundeService.GetAllKunder()).ToList();
            mekanikerList = (await MekanikerService.GetAllMekaniker()).ToList();
        }
        catch (Exception ex)
        {
            errorMessage = "Kunne ikke loade fra databasen: " + ex.Message;
        }
    }

    private void AddYdelse() // Laver en ydelse og tilføjer den til listen
    {
        var ydelse = ydelseList.FirstOrDefault(p => p.YdelseId == selectedYdelseId);
        if (ydelse != null)
        {
            if (aktuelPris == 0)
            {
                ordrerYdelser.Add(new OrdrerYdelse
                    {
                        YdelseId = ydelse.YdelseId,
                        YdelseNavn = ydelse.Navn,
                        YdelsePris = ydelse.Pris,
                        YdelseArt = ydelse.Art,
                        YdelseTimer = ydelse.Timer,
                        YdelseMængde = selectedMængde,
                    });
                totalPrice += ydelse.Pris * selectedMængde;
            }
            else // Kører hvis prisen på ydelsen skal være noget andet end standardprisen
            {
                ordrerYdelser.Add(new OrdrerYdelse
                    {
                        YdelseId = ydelse.YdelseId,
                        YdelseNavn = ydelse.Navn,
                        YdelsePris = aktuelPris,
                        YdelseArt = ydelse.Art,
                        YdelseTimer = ydelse.Timer,
                        YdelseMængde = selectedMængde,
                    });
                totalPrice += aktuelPris * selectedMængde;
                aktuelPris = 0;
            }

        }
    }

    private void RemoveYdelse(OrdrerYdelse ordrerYdelse) // Sletter ydelsen fra listen
    {
        ordrerYdelser.Remove(ordrerYdelse);
        totalPrice -= ordrerYdelse.YdelsePris * ordrerYdelse.YdelseMængde;
    }

    private async Task SubmitOrder() // Tilføjer ordreren til databasen
    {
        try
        {
            var addedOrdre = new Ordre
                    {
                        KundeId = kundeList.Single(k => k.Navn == selectedKunde).KundeId,
                        MekanikerId = mekanikerList.Single(m => m.MekanikerId == selectedMekaniker).MekanikerId,
                        YdelseTilOrdre = ordrerYdelser.Select(p => new YdelseTilOrdre
                        {
                            YdelseId = p.YdelseId,
                            Mængde = p.YdelseMængde,
                            AktuelPris = p.YdelsePris
                        }).ToList()
                    };
            var response = await OrdreService.AddOrdre(addedOrdre);

            if (response == (int)HttpStatusCode.OK)
            {
                successMessage = "Ordreren blev oprettet!";
                ordrerYdelser.Clear();
                selectedKunde = "";
                totalPrice = 0; // Resetter variablerne
            }

            else
            {
                errorMessage = "Ordrer oprettelsen mislykkedes.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Ordrer indsendelsen mislykkedes: " + ex.Message;
        }
    }
    private void AddLejetScooter() // Gemmer den indtastede information om den lejede scooter som en ydelse
    {
        var addedLejetScooter= new LejetScooter
            {
                LejePris = lejetScooter.LejePris,
                DageLejet = lejetScooter.DageLejet,
                Forskikring = lejetScooter.Forskikring,
                KørtKilometer = lejetScooter.KørtKilometer,
                Skadet = lejetScooter.Skadet,
            };

        var ydelse = ydelseList.FirstOrDefault(p => p.YdelseId == selectedYdelseId);
        if (ydelse != null)
        {
            {
                ordrerYdelser.Add(new OrdrerYdelse
                    {
                        YdelseId = ydelse.YdelseId,
                        YdelseNavn = ydelse.Navn,
                        YdelsePris = addedLejetScooter.GetLejeScooterTotalPris(),
                        YdelseArt = ydelse.Art,
                        YdelseMængde = 1
                    });
                totalPrice += addedLejetScooter.GetLejeScooterTotalPris();

                lejetScooter = new LejetScooter();
                ClosePopup(true);
            }
        }
    }

    private void ShowPopup(bool isChange) // Viser et popup for enten Lejning af scooter eller ændring af pris
    {
        modalTitle = isChange ? "Ændre Pris på Ydelse" : "Udlejning af Scooter";
        modalButtonText = isChange ? "Ændre Pris" : "Tilføj Ydelse";
        if (selectedYdelseId == lejetScooter.YdelseId) // Viser
        {
            isPopupVisible = true;
        }

        if (isChange)
        {
            isChangePopupVisible = true;
        }
    }

    private void ClosePopup(bool resetPris) // Lukker popup'en 
    {
        isPopupVisible = false;
        isChangePopupVisible = false;

        if (resetPris)
        {
            resetAktuelPris();
            selectedYdelseId = 1;
        }
    }

    private void resetAktuelPris()
    {
        aktuelPris = 0;
    }
}
