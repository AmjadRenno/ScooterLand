@page "/opretordre"
@using Radzen  <!-- Importer Radzen -->
@using Radzen.Blazor
@using BlazorAppClientServer.Client.Services
@using BlazorAppClientServer.Shared.Models
@using System.Net;
@inject HttpClient HttpClient


<h3>Create a New Order</h3>

<div>
    <label>Customer Name:</label>
    <input type="text" @bind="selectedKunde" />
</div>

<div>
    <label>Select Product:</label>
    <select @bind="SelectedYdelseId">
        <option value="" disabled>Select a product</option>
        @foreach (var ydelse in YdelseList)
        {
            <option value="@ydelse.YdelseId">@ydelse.Navn (@ydelse.Pris:C)</option>
        }
    </select>
    <label>Quantity:</label>
    <input type="number" @bind="SelectedQuantity" min="1" />

    <button @onclick="AddYdelse">Add to List</button>
</div>

<h4>Products in Order:</h4>
@if (OrderYdelser.Any())
{
    <ul>
        @foreach (var ydelse in OrderYdelser)
        {
            <li>@ydelse.YdelseNavn - Quantity: @ydelse.YdelseMængde</li>
        }
    </ul>
}
else
{
    <p>No products added yet.</p>
}

<button @onclick="SubmitOrder">Submit Order</button>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <p style="color: red;">@ErrorMessage</p>
}

@code {
    [Inject]
    private IOrdreService OrdreService { get; set; }

    [Inject]
    private IYdelseService YdelseService { get; set; }

    [Inject]
    private IKundeService KundeService { get; set; }

    private string selectedKunde = "";
    private int SelectedYdelseId = 0;
    private int SelectedQuantity = 1;

    private List<Ydelse> YdelseList = new();
    private List<Kunde> KundeList = new();
    private List<OrdrerYdelse> OrderYdelser = new();

    private string ErrorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Load products from the API
            YdelseList = (await YdelseService.GetAllYdelser()).ToList();
            KundeList = (await KundeService.GetAllKunder()).ToList();
        }
        catch (Exception ex)
        {
            ErrorMessage = "Failed to load products: " + ex.Message;
        }
    }

    private void AddYdelse()
    {
        var ydelse = YdelseList.FirstOrDefault(p => p.YdelseId == SelectedYdelseId);
        if (ydelse != null)
        {
            // Add product to the list
            OrderYdelser.Add(new OrdrerYdelse
                {
                    YdelseId = ydelse.YdelseId,
                    YdelseNavn = ydelse.Navn,
                    YdelsePris = ydelse.Pris,
                    YdelseArt = ydelse.Art,
                    YdelseTimer = ydelse.Timer,
                    YdelseMængde = SelectedQuantity
                });

            // Reset the form
            SelectedYdelseId = 0;
            SelectedQuantity = 1;
        }
    }

    private async Task SubmitOrder()
    {
        try
        {
            var addedOrdre = new Ordre
                {
                    KundeId = KundeList.Single(k => k.Navn == selectedKunde).KundeId,
                    MekanikerId = 1,
                    YdelseMængder = OrderYdelser.Select(p => new YdelseMængde
                    {
                        YdelseId = p.YdelseId,
                        Mængde = p.YdelseMængde
                    }).ToList()
                };
            var response = await OrdreService.AddOrdre(addedOrdre);

            if (response != (int)HttpStatusCode.OK)
            {
               ErrorMessage = "Failed to create order.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = "Failed to submit order: " + ex.Message;
        }
    }
}
