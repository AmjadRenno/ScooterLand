@page "/maerke-forbindelser"
@using BlazorAppClientServer.Client.Services
@using BlazorAppClientServer.Shared.Models
@using BlazorAppClientServer.Client.Shared

@inject IMekanikerService MekanikerService
@inject IMærkeService MærkeService
@inject HttpClient Http

<Header />

<h3>Mærke Forbindelser</h3>

<div class="button-group mb-3">
    <button class="btn btn-primary" @onclick="OpenAddMærkePopup">Tilføj et Mærke</button>
    <button class="btn btn-danger ms-1" @onclick="OpenDeleteMærkePopup">Slet et Mærke</button>
</div>

<h3>Forbind Mærke til Mekaniker</h3>

<div>
    <label for="mekaniker">Mekaniker:</label>
    <select id="mekaniker" class="form-select" @bind="selectedMekanikerId">
        <option value="">Vælg...</option>
        @foreach (var mekaniker in mekanikere)
        {
            <option value="@mekaniker.MekanikerId">@mekaniker.Navn</option>
        }
    </select>
</div>

<div>
    <label for="maerke">Mærke:</label>
    <select id="maerke" class="form-select" @bind="selectedMaerkeId">
        <option value="">Vælg...</option>
        @foreach (var maerke in maerker)
        {
            <option value="@maerke.MærkeId">@maerke.Navn</option>
        }
    </select>
</div>

<button class="btn btn-primary mt-2" @onclick="ForbindMaerkeTilMekaniker">Forbind</button>

@if (errorMessage != null)
{
    <p style="color: red;">@errorMessage</p>
}

@if (successMessage != null)
{
    <p style="color: green;">@successMessage</p>
}

@if (showAddMærkePopup)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Tilføj et nyt Mærke</h5>
                    <button type="button" class="btn-close" @onclick="CloseAddMærkePopup"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="mærkeNavn" class="form-label">Navn</label>
                        <input type="text" id="mærkeNavn" class="form-control" @bind="newMærkeNavn" />
                    </div>
                    <div class="d-flex justify-content-start">
                        <button class="btn btn-primary" @onclick="SaveMærke">Gem</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@if (showDeleteMærkePopup)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Slet et Mærke</h5>
                    <button type="button" class="btn-close" @onclick="CloseDeleteMærkePopup"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="selectMærke" class="form-label">Mærke til sletning</label>
                        <select id="selectMærke" class="form-select" @bind="selectedMærkeId">
                            <option value="">Vælg...</option>
                            @foreach (var maerke in maerker)
                            {
                                <option value="@maerke.MærkeId">@maerke.Navn</option>
                            }
                        </select>
                    </div>
                    <div class="d-flex justify-content-start">
                        <button class="btn btn-danger" @onclick="DeleteMærke">Slet</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Mekaniker> mekanikere = new();
    private List<Mærke> maerker = new();

    private int? selectedMekanikerId;
    private int? selectedMaerkeId;
    private int? selectedMærkeId;

    private string? errorMessage;
    private string? successMessage;

    private bool showAddMærkePopup = false;
    private bool showDeleteMærkePopup = false;

    private string newMærkeNavn = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var fetchedMekanikere = (await MekanikerService.GetAllMekaniker()).ToList();
            mekanikere = fetchedMekanikere ?? new List<Mekaniker>();

            var fetchedMaerker = (await MærkeService.GetAllMærker()).ToList();
            maerker = fetchedMaerker ?? new List<Mærke>();
        }
        catch (Exception ex)
        {
            errorMessage = "Fejl ved indlæsning af data: " + ex.Message;
            mekanikere = new List<Mekaniker>();
            maerker = new List<Mærke>();
        }
    }

    private async Task ForbindMaerkeTilMekaniker()
    {
        if (selectedMekanikerId == null || selectedMaerkeId == null)
        {
            errorMessage = "Vælg både en mekaniker og et mærke.";
            return;
        }

        var mekaniker = mekanikere.FirstOrDefault(m => m.MekanikerId == selectedMekanikerId);
        if (mekaniker != null)
        {
            mekaniker.MærkeListe?.Clear();

            var maerke = maerker.FirstOrDefault(m => m.MærkeId == selectedMaerkeId);
            if (maerke != null)
            {
                mekaniker.MærkeListe ??= new List<Mærke>();
                mekaniker.MærkeListe.Add(maerke);

                var success = await MekanikerService.UpdateMekaniker(mekaniker);

                if (success)
                {
                    successMessage = "Mærke forbundet til mekaniker.";
                    errorMessage = null;
                }
                else
                {
                    errorMessage = "Der opstod en fejl.";
                    successMessage = null;
                }
            }
        }
    }

    private void OpenAddMærkePopup()
    {
        showAddMærkePopup = true;
    }

    private void CloseAddMærkePopup()
    {
        showAddMærkePopup = false;
        newMærkeNavn = string.Empty;
    }

    private async Task SaveMærke()
    {
        if (!string.IsNullOrWhiteSpace(newMærkeNavn))
        {
            var newMærke = new Mærke { Navn = newMærkeNavn };
            await MærkeService.AddMærke(newMærke);
            CloseAddMærkePopup();
            await ReloadMærker();
        }
    }

    private void OpenDeleteMærkePopup()
    {
        showDeleteMærkePopup = true;
    }

    private void CloseDeleteMærkePopup()
    {
        showDeleteMærkePopup = false;
        selectedMærkeId = null;
    }

    private async Task DeleteMærke()
    {
        if (selectedMærkeId.HasValue)
        {
            await MærkeService.DeleteMærke(selectedMærkeId.Value);
            CloseDeleteMærkePopup();
            await ReloadMærker();
        }
    }

    private async Task ReloadMærker()
    {
        maerker = (await MærkeService.GetAllMærker()).ToList();
    }
}