@using BlazorAppClientServer.Client.Services;
@using BlazorAppClientServer.Shared.Models;
@using System.Net;
@using BlazorAppClientServer.Client.Shared;
@inject HttpClient Http

@page "/opretkunde"

<Header />

<h3>Indtast Kunde</h3>

<EditForm Model="newKunde" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <div>
        <label for="KundeName">Navn:</label>
        <InputText id="KundeName" @bind-Value="newKunde.Navn" class="form-control" />
    </div>
    <div>
        <label for="KundeAddress">Adresse:</label>
        <InputText id="KundeAddress" @bind-Value="newKunde.Adresse" class="form-control" />
    </div>
    <div>
        <label for="KundePhone">Telefonnummer:</label>
        <InputText id="KundePhone" @bind-Value="TelefonNummerString"
               class="form-control" inputmode="numeric" pattern="[0-9]*" maxlength="8"
               style="appearance: none; -moz-appearance: none; -webkit-appearance: none;" />
    </div>
    <div>
        <label for="KundeMærke">Mærke:</label>
        <InputSelect @bind-Value="newKunde.MærkeId" class="form-control dropdown-indicator">
            @foreach (var mærke in mærkeList)
            {
                <option value="@mærke.MærkeId">@mærke.Navn</option>
            }
        </InputSelect>
        <ValidationSummary />
    </div>

    <button type="submit" class="btn btn-primary mt-2 mb-2">Gem Kunde</button>
</EditForm>

@if (kundeList.Any())
{
    <h4>Senest oprettet Kunder:</h4>
    <table class="table table-striped text-center">
        <thead>
            <tr>
                <th>Kunde ID</th>
                <th>Navn</th>
                <th>Adresse</th>
                <th>Telefonnummer</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var kunde in kundeList.OrderByDescending(k => k.KundeId))
            {
                <tr>
                    <td>@kunde.KundeId</td>
                    <td>@kunde.Navn</td>
                    <td>@kunde.Adresse</td>
                    <td>@kunde.TelefonNummer</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private Kunde newKunde = new Kunde();
    private List<Kunde> kundeList = new List<Kunde>();
    private List<Mærke> mærkeList = new List<Mærke>();

    private string TelefonNummerString //Denne er lavet for at fjerne de grimme pile (Op/ned) som var i input feltet
    {
        get => newKunde.TelefonNummer > 0 ? newKunde.TelefonNummer.ToString() : string.Empty;
        set
        {
            if (int.TryParse(value, out var number))
            {
                newKunde.TelefonNummer = number;
            }
            else
            {
                newKunde.TelefonNummer = 0; // Default to 0 if parsing fails
            }
        }
    }

    [Inject]
    private IKundeService KundeService { get; set; }
    [Inject]
    private IMærkeService MærkeService { get; set; }

    int ErrorCode { get; set; } = 0;

    protected override async Task OnInitializedAsync()
    {
        kundeList = (await KundeService.GetAllKunder()).ToList();
        mærkeList = (await MærkeService.GetAllMærker()).ToList();
    }

    private async Task HandleValidSubmit()
    {
        ErrorCode = await KundeService.AddKunde(newKunde);
        if (ErrorCode == (int)HttpStatusCode.OK)
        {
            kundeList = (await KundeService.GetAllKunder()).ToList();
        }
        newKunde = new Kunde();
    }
}
