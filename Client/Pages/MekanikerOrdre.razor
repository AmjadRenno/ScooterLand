@page "/mekaniker-ordre"
@using BlazorAppClientServer.Client.Services
@using BlazorAppClientServer.Shared.Models
@using BlazorAppClientServer.Client.Shared

@inject IMekanikerService MekanikerService
@inject IOrdreService OrdreService

<Header />

<h3>Ordrer for Mekaniker</h3>

<label for="MekanikerDropdown">Vælg Mekaniker:</label>
<select id="MekanikerDropdown" class="form-select mb-2" @onchange="GetMekanikerOrdre">
    <option value="">Vælg en mekaniker</option>
    @foreach (var mekaniker in mekanikerList)
    {
        <option value="@mekaniker.MekanikerId">@mekaniker.Navn</option>
    }
</select>

@if (nyOrdreList != null && nyOrdreList.Any())

{
    <h4>Ordrer for @SelectedMechanicName idag og frem:</h4>
    <table class="table">
        <thead>
            <tr>
                <th>Ordre ID</th>
                <th>Dato</th>
                <th>Status</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var ordre in nyOrdreList.
            Where(o => o.OrdreDate.Date >= DateTime.Today).
            OrderBy(o => o.OrdreDate))

            {
                <tr>
                    <td>@ordre.OrdreId</td>
                    <td>@ordre.OrdreDate.ToString("dd-MM-yyyy HH:mm")</td>
                    <td>@(ordre.Status ? "Fuldført" : "Ikke fuldført")</td>
                </tr>
            }
        </tbody>
    </table>    
}

else

{
    <p>Ingen ordrer fundet for denne mekaniker.</p>
}

@if (nyOrdreList.Any(o => !o.Status && o.OrdreDate.Date < DateTime.Today))
{
    <h4>Ikke færdiggjorte ordrer før dagsdato:</h4>
    <table class="table">
        <thead>
            <tr>
                <th>Ordre ID</th>
                <th>Dato</th>
                <th>Status</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var ordre in nyOrdreList
            .Where(o => !o.Status && o.OrdreDate.Date < DateTime.Today)
            .OrderBy(o => o.OrdreDate))
            {
                <tr>
                    <td>@ordre.OrdreId</td>
                    <td>@ordre.OrdreDate.ToString("dd-MM-yyyy HH:mm")</td>
                    <td>@(ordre.Status ? "Fuldført" : "Ikke fuldført")</td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    
}

@code {
    private List<Mekaniker> mekanikerList = new List<Mekaniker>();

    private List<Ordre> alleOrdreList = new List<Ordre>();

    private List<Ordre> nyOrdreList = new List<Ordre>();

    private string SelectedMechanicName = string.Empty;

    protected override async Task OnInitializedAsync()

    {

        mekanikerList = (await MekanikerService.GetAllMekaniker()).ToList();
        alleOrdreList = (await OrdreService.GetAllOrdre()).ToList();

    }

    private async Task GetMekanikerOrdre(ChangeEventArgs e)
    {
        var mechanicId = e.Value?.ToString();

        if (!string.IsNullOrEmpty(mechanicId))
        {
            var selectedMechanic = mekanikerList.FirstOrDefault(m => m.MekanikerId == int.Parse(mechanicId));
            if (selectedMechanic != null)
            {
                SelectedMechanicName = selectedMechanic.Navn;

                nyOrdreList = alleOrdreList.Where(o => o.MekanikerId == selectedMechanic.MekanikerId).ToList();

            }

        }

        else

        {

            nyOrdreList = new List<Ordre>();

        }

    }
}

